{"version":3,"file":"static/js/897.dfa3c894.chunk.js","mappings":"0RAKaA,EAAOC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iBAC1B,SAAAC,GAAgB,IAAbC,EAAKD,EAALC,MACH,OAAOC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,yFAGeE,EAAMG,MAAMC,aAEvC,IAGWC,EAAaT,EAAAA,GAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,iVAIhBS,EAQEC,GAITC,EAAWb,EAAAA,GAAAA,IAAUc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,oH,UC7BnB,SAASa,EAAQZ,GAAgB,IAAba,EAAQb,EAARa,SACjC,OACEC,EAAAA,EAAAA,MAAClB,EAAI,CAAAiB,SAAA,EACHE,EAAAA,EAAAA,KAACT,EAAU,KACXS,EAAAA,EAAAA,KAACL,EAAQ,CAAAG,SAAEA,MAGjB,C,2HCNaG,EAAQnB,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sHACnB,SAAAC,GAAQ,OAAAA,EAALC,MAAkBgB,OAAOC,QAAQ,IAQlCC,EAAoBtB,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,8CAK9BqB,EAAcvB,EAAAA,GAAAA,KAAWU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,uDAKzBsB,EAAgBxB,EAAAA,GAAAA,IAAUc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,+FAQ1BuB,EAAiBzB,EAAAA,GAAAA,OAAa0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,qTAChC,SAAAyB,GAAQ,OAAAA,EAALvB,MAAkBgB,OAAOQ,MAAM,IAiBhC,SAAAC,GAAQ,OAAAA,EAALzB,MAAkBgB,OAAOU,UAAU,IAItCC,EAAc/B,EAAAA,GAAAA,IAAUgC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,qFAOxB+B,GAAejC,EAAAA,EAAAA,IAAOkC,EAAAA,EAAPlC,CAAsBmC,IAAAA,GAAAjC,EAAAA,EAAAA,GAAA,2HAM/B,SAAAkC,GAAQ,OAAAA,EAALhC,MAAkBiC,aAAaC,OAAO,I,kBC/D/CC,EAAkBvC,EAAAA,GAAAA,EAAQC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kIACnC,SAAAC,GAAQ,OAAAA,EAALC,MAAkBgB,OAAOC,QAAQ,I,UCAzB,SAASmB,EAAWrC,GAAiB,IAC9CsC,EAASC,EAAQC,EAYrB,OAb6CxC,EAATyC,WAIlCH,EAAU,2BACVC,EAAS,SACTC,EAAa,WAEbF,EAAU,yBACVC,EAAS,YACTC,EAAa,YAIb1B,EAAAA,EAAAA,MAACsB,EAAe,CAAAvB,SAAA,CACbyB,EAAQ,KAACvB,EAAAA,EAAAA,KAAC2B,EAAAA,GAAU,CAACC,GAAIJ,EAAO1B,SAAE2B,MAGzC,C,kBCnBaI,EAAQ/C,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0JAStB,SAAAC,GAAQ,OAAAA,EAALC,MAAkBgB,OAAOC,QAAQ,IAGlC2B,EAAQhD,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,mWAKX,SAAAyB,GAAQ,OAAAA,EAALvB,MAAkBgB,OAAO6B,OAAO,IACtC,SAAApB,GAAQ,OAAAA,EAALzB,MAAkBiC,aAAaC,OAAO,IAMtC,SAAAF,GAAQ,OAAAA,EAALhC,MAAkBgB,OAAO6B,OAAO,IAG5C,SAAAC,GAAQ,OAAAA,EAAL9C,MAAkBgB,OAAOC,QAAQ,IC1BpC8B,EAAY,SAAAC,GACvB,IAAQC,EAAsCD,EAAtCC,KAAIC,EAAkCF,EAAhCG,KAAAA,OAAI,IAAAD,EAAG,OAAMA,EAAAE,EAAmBJ,EAAjBK,MAAAA,OAAK,IAAAD,EAAG,KAAIA,EACnCE,EAAkBL,EAAKM,OAAO,GAAGC,cAAgBP,EAAKQ,MAAM,GAElE,OACE3C,EAAAA,EAAAA,KAAA,OAAAF,UACEC,EAAAA,EAAAA,MAAC8B,EAAK,CAAA/B,SAAA,CACHyC,GAASC,GACVxC,EAAAA,EAAAA,KAAC8B,GAAKc,EAAAA,EAAAA,GAAA,CACJP,KAAMA,EACNF,KAAMA,EACNU,GAAIV,EACJW,YAAaN,EACbO,UAAQ,GACJb,QAKd,ECJe,SAASc,EAAY/D,GAAgB,IAI9CgE,EAAOxB,EAAYyB,EAAcC,EAJAC,EAAQnE,EAARmE,SAC/BC,GAAWC,EAAAA,EAAAA,MAEXC,EAAwB,aAAbH,EAGA,UAAbA,IACFH,EAAQ,QACRxB,EAAa,UACbyB,EAAe,mBACfC,EAAYK,EAAAA,IAGVD,IACFN,EAAQ,oBACRxB,EAAa,UACbyB,EAAe,0BACfC,EAAYM,EAAAA,IAuBd,OACEzD,EAAAA,EAAAA,KAACI,EAAiB,CAAAN,UAChBC,EAAAA,EAAAA,MAAA,WAAAD,SAAA,EACEE,EAAAA,EAAAA,KAACC,EAAK,CAAAH,SAAEmD,KACRlD,EAAAA,EAAAA,MAACM,EAAW,CAACqD,SAxBE,SAAAC,GACnBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cAEbC,EAAc,CAClBC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,OAG/BX,IAAUQ,EAAY5B,KAAO0B,EAAKI,SAAS9B,KAAK+B,OAEpDb,EAASF,EAAUY,IAChBK,SACAC,MAAK,kBAAMC,EAAAA,GAAAA,QAAcpB,EAAa,IACtCqB,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,+CAA+C,IAE1ET,EAAKW,OACP,EAM0C1E,SAAA,EAClCC,EAAAA,EAAAA,MAACO,EAAa,CAAAR,SAAA,CAEXyD,IAAYvD,EAAAA,EAAAA,KAACiC,EAAS,CAACE,KAAK,UAE7BnC,EAAAA,EAAAA,KAACiC,EAAS,CAACI,KAAK,QAAQF,KAAK,WAE7BnC,EAAAA,EAAAA,KAACiC,EAAS,CACRI,KAAK,WACLF,KAAK,WACLsC,QAAQ,cACRxB,MAAM,oDAIVjD,EAAAA,EAAAA,KAACO,EAAc,CAAC8B,KAAK,SAAQvC,SAAC,sBAE9BC,EAAAA,EAAAA,MAACc,EAAW,CAAAf,SAAA,EACVE,EAAAA,EAAAA,KAACe,EAAY,CAACsB,KAAK,SAAQvC,SAAE2B,KAE7BzB,EAAAA,EAAAA,KAACsB,EAAW,CAACI,UAAW6B,cAMpC,C,+GCnFe,SAASmB,IACtB,OACE3E,EAAAA,EAAAA,MAAA4E,EAAAA,SAAA,CAAA7E,SAAA,EACEC,EAAAA,EAAAA,MAAC6E,EAAAA,GAAM,CAAA9E,SAAA,EACLE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,WACPE,EAAAA,EAAAA,KAAA,QACEmC,KAAK,cACL0C,QAAQ,+CAIZ7E,EAAAA,EAAAA,KAACH,EAAAA,EAAQ,CAAAC,UACPE,EAAAA,EAAAA,KAACgD,EAAAA,EAAY,CAACI,SAAS,cAI/B,C","sources":["components/AuthBody/AuthBody.styled.js","components/AuthBody/AuthBody.jsx","components/Forms/AuthDataForm/AuthDataForm.styled.js","components/Forms/SwitchForms/SwitchForms.styled.js","components/Forms/SwitchForms/SwitchForms.jsx","components/Forms/TextField/TextField.styled.js","components/Forms/TextField/TextField.jsx","components/Forms/AuthDataForm/AuthDataForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { styled, css } from 'styled-components';\n\nimport bgPath from 'images/authbg.jpg';\nimport bgRetinaPath from 'images/authbg@2x.jpg';\n\nexport const Page = styled.div`\n  ${({ theme }) => {\n    return css`\n      display: flex;\n      width: 100%;\n      height: calc(100vh - ${theme.sizes.headerHeight});\n    `;\n  }}\n`;\n\nexport const BannerSide = styled.div`\n  flex-grow: 1;\n\n  background-color: #172234;\n  background: url(${bgPath});\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n\n  /* for retina displays */\n  @media only screen and (min-resolution: 192dpi),\n    only screen and (min-resolution: 2dppx) {\n    background: url(${bgRetinaPath});\n  }\n`;\n\nexport const FormSide = styled.div`\n  min-width: 38%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\n","import { BannerSide, FormSide, Page } from './AuthBody.styled';\n\nexport default function AuthBody({ children }) {\n  return (\n    <Page>\n      <BannerSide />\n      <FormSide>{children}</FormSide>\n    </Page>\n  );\n}\n","import { styled } from 'styled-components';\nimport { AccentedButton } from 'styling/buttons';\n\nexport const Title = styled.h1`\n  color: ${({ theme }) => theme.colors.blackish};\n  font-size: 28px;\n  font-weight: 700;\n  line-height: 121.429%;\n\n  margin-bottom: 20px;\n`;\n\nexport const AuthFormContainer = styled.div`\n  width: 80%;\n  max-width: 350px;\n`;\n\nexport const FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FieldsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  margin-bottom: 10px;\n`;\n\nexport const ForgotPassword = styled.button`\n  color: ${({ theme }) => theme.colors.accent};\n  text-decoration: none;\n  border: none;\n  background-color: transparent;\n  align-self: flex-end;\n\n  font-family: Lato;\n  font-weight: 600;\n\n  margin-bottom: 30px;\n\n  &:hover,\n  &:focus-visible {\n    text-decoration: underline;\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.colors.accentDark};\n  }\n`;\n\nexport const ButtonGroup = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const SubmitButton = styled(AccentedButton)`\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 137.5%;\n\n  border-radius: ${({ theme }) => theme.borderRadius.regular};\n`;\n","import { styled } from 'styled-components';\n\nexport const SwitchFormsText = styled.p`\n  ${({ theme }) => theme.colors.blackish};\n  text-align: center;\n  font-family: Lato;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 157.143%;\n`;\n","import { StyledLink } from 'styling/links';\nimport { SwitchFormsText } from './SwitchForms.styled';\n\nexport default function SwitchForms({ condition }) {\n  let message, linkTo, buttonText;\n\n  if (condition) {\n    message = 'Already have an account?';\n    linkTo = '/login';\n    buttonText = 'Log in';\n  } else {\n    message = \"Don't have an account?\";\n    linkTo = '/register';\n    buttonText = 'Sign up';\n  }\n\n  return (\n    <SwitchFormsText>\n      {message} <StyledLink to={linkTo}>{buttonText}</StyledLink>\n    </SwitchFormsText>\n  );\n}\n","import { styled } from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 142.857%;\n\n  color: ${({ theme }) => theme.colors.blackish};\n`;\n\nexport const Field = styled.input`\n  padding: 0 20px;\n  height: 48px;\n\n  /* border: none; */\n  border: 2px solid ${({ theme }) => theme.colors.lightBg};\n  border-radius: ${({ theme }) => theme.borderRadius.regular};\n\n  font-family: 'Lato';\n  font-size: 20px;\n  line-height: 2;\n\n  background-color: ${({ theme }) => theme.colors.lightBg};\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.blackish};\n    opacity: 0.5;\n\n    font-family: 'Lato';\n    font-size: 14px;\n    line-height: 157.143%;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Field, Label } from './TextField.styled';\n\nexport const TextField = props => {\n  const { name, type = 'text', label = null } = props;\n  const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n\n  return (\n    <div>\n      <Label>\n        {label || capitalizedName}\n        <Field\n          type={type}\n          name={name}\n          id={name}\n          placeholder={capitalizedName}\n          required\n          {...props}\n        />\n      </Label>\n    </div>\n  );\n};\n\n// ****** PropTypes *******************************\n\nTextField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  label: PropTypes.string,\n};\n","import { useDispatch } from 'react-redux';\nimport { login, register } from 'redux/auth/operations';\n\nimport {\n  FieldsWrapper,\n  FormWrapper,\n  SubmitButton,\n  AuthFormContainer,\n  ButtonGroup,\n  Title,\n  ForgotPassword,\n} from './AuthDataForm.styled';\nimport { toast } from 'react-hot-toast';\nimport SwitchForms from '../SwitchForms/SwitchForms';\nimport { TextField } from '../TextField';\n\n// ################################################\n\nexport default function AuthDataForm({ formType }) {\n  const dispatch = useDispatch();\n\n  const isSignUp = formType === 'register';\n  let title, buttonText, toastMessage, operation;\n\n  if (formType === 'login') {\n    title = 'Login';\n    buttonText = 'Sign in';\n    toastMessage = 'Login successful';\n    operation = login;\n  }\n\n  if (isSignUp) {\n    title = 'Create an account';\n    buttonText = 'Sign up';\n    toastMessage = 'Registration successful';\n    operation = register;\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n\n    const credentials = {\n      email: form.elements.email.value,\n      password: form.elements.password.value,\n    };\n\n    if (isSignUp) credentials.name = form.elements.name.value;\n\n    dispatch(operation(credentials))\n      .unwrap()\n      .then(() => toast.success(toastMessage))\n      .catch(() => toast.error('Error authenticating. Please try again later'));\n\n    form.reset();\n  };\n\n  return (\n    <AuthFormContainer>\n      <section>\n        <Title>{title}</Title>\n        <FormWrapper onSubmit={handleSubmit}>\n          <FieldsWrapper>\n            {/* Name */}\n            {isSignUp && <TextField name=\"name\" />}\n            {/* Email */}\n            <TextField type=\"email\" name=\"email\" />\n            {/* Password */}\n            <TextField\n              type=\"password\"\n              name=\"password\"\n              pattern=\"(?=.*).{7,}\"\n              title=\"Password must be at least 7 characters long\"\n            />\n          </FieldsWrapper>\n\n          <ForgotPassword type=\"button\">Forgot password?</ForgotPassword>\n\n          <ButtonGroup>\n            <SubmitButton type=\"submit\">{buttonText}</SubmitButton>\n\n            <SwitchForms condition={isSignUp} />\n          </ButtonGroup>\n        </FormWrapper>\n      </section>\n    </AuthFormContainer>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n\nimport AuthDataForm from 'components/Forms/AuthDataForm';\nimport AuthBody from 'components/AuthBody';\n\nexport default function LoginPage() {\n  return (\n    <>\n      <Helmet>\n        <title>Login</title>\n        <meta\n          name=\"description\"\n          content=\"Log in to view your personalized items\"\n        />\n      </Helmet>\n\n      <AuthBody>\n        <AuthDataForm formType=\"login\" />\n      </AuthBody>\n    </>\n  );\n}\n"],"names":["Page","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","css","_templateObject2","sizes","headerHeight","BannerSide","_templateObject3","bgPath","bgRetinaPath","FormSide","_templateObject4","AuthBody","children","_jsxs","_jsx","Title","colors","blackish","AuthFormContainer","FormWrapper","FieldsWrapper","ForgotPassword","_templateObject5","_ref2","accent","_ref3","accentDark","ButtonGroup","_templateObject6","SubmitButton","AccentedButton","_templateObject7","_ref4","borderRadius","regular","SwitchFormsText","SwitchForms","message","linkTo","buttonText","condition","StyledLink","to","Label","Field","lightBg","_ref5","TextField","props","name","_props$type","type","_props$label","label","capitalizedName","charAt","toUpperCase","slice","_objectSpread","id","placeholder","required","AuthDataForm","title","toastMessage","operation","formType","dispatch","useDispatch","isSignUp","login","register","onSubmit","event","preventDefault","form","currentTarget","credentials","email","elements","value","password","unwrap","then","toast","catch","reset","pattern","LoginPage","_Fragment","Helmet","content"],"sourceRoot":""}